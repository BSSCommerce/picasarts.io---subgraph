"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.Activity = exports.Log = exports.Account = void 0;
var graph_ts_1 = require("@graphprotocol/graph-ts");
var Account = /** @class */ (function (_super) {
    __extends(Account, _super);
    function Account(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("signerId", graph_ts_1.Value.fromString(""));
        _this.set("log", graph_ts_1.Value.fromStringArray(new Array(0)));
        return _this;
    }
    Account.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Account entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Account entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Account", id.toString(), this);
        }
    };
    Account.load = function (id) {
        return changetype(graph_ts_1.store.get("Account", id));
    };
    Object.defineProperty(Account.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Account.prototype, "signerId", {
        get: function () {
            var value = this.get("signerId");
            return value.toString();
        },
        set: function (value) {
            this.set("signerId", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Account.prototype, "log", {
        get: function () {
            var value = this.get("log");
            return value.toStringArray();
        },
        set: function (value) {
            this.set("log", graph_ts_1.Value.fromStringArray(value));
        },
        enumerable: false,
        configurable: true
    });
    return Account;
}(graph_ts_1.Entity));
exports.Account = Account;
var Log = /** @class */ (function (_super) {
    __extends(Log, _super);
    function Log(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        _this.set("standard", graph_ts_1.Value.fromString(""));
        _this.set("version", graph_ts_1.Value.fromString(""));
        _this.set("event", graph_ts_1.Value.fromString(""));
        return _this;
    }
    Log.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Log entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Log entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Log", id.toString(), this);
        }
    };
    Log.load = function (id) {
        return changetype(graph_ts_1.store.get("Log", id));
    };
    Object.defineProperty(Log.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "standard", {
        get: function () {
            var value = this.get("standard");
            return value.toString();
        },
        set: function (value) {
            this.set("standard", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "version", {
        get: function () {
            var value = this.get("version");
            return value.toString();
        },
        set: function (value) {
            this.set("version", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "event", {
        get: function () {
            var value = this.get("event");
            return value.toString();
        },
        set: function (value) {
            this.set("event", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "adminId", {
        get: function () {
            var value = this.get("adminId");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("adminId");
            }
            else {
                this.set("adminId", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "adminSet", {
        get: function () {
            var value = this.get("adminSet");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("adminSet");
            }
            else {
                this.set("adminSet", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "accountId", {
        get: function () {
            var value = this.get("accountId");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("accountId");
            }
            else {
                this.set("accountId", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "did", {
        get: function () {
            var value = this.get("did");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("did");
            }
            else {
                this.set("did", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "registered", {
        get: function () {
            var value = this.get("registered");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("registered");
            }
            else {
                this.set("registered", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Log.prototype, "owner", {
        get: function () {
            var value = this.get("owner");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("owner");
            }
            else {
                this.set("owner", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return Log;
}(graph_ts_1.Entity));
exports.Log = Log;
var Activity = /** @class */ (function (_super) {
    __extends(Activity, _super);
    function Activity(id) {
        var _this = _super.call(this) || this;
        _this.set("id", graph_ts_1.Value.fromString(id));
        return _this;
    }
    Activity.prototype.save = function () {
        var id = this.get("id");
        assert(id != null, "Cannot save Activity entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, "Cannot save Activity entity with non-string ID. " +
                'Considering using .toHex() to convert the "id" to a string.');
            graph_ts_1.store.set("Activity", id.toString(), this);
        }
    };
    Activity.load = function (id) {
        return changetype(graph_ts_1.store.get("Activity", id));
    };
    Object.defineProperty(Activity.prototype, "id", {
        get: function () {
            var value = this.get("id");
            return value.toString();
        },
        set: function (value) {
            this.set("id", graph_ts_1.Value.fromString(value));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "type", {
        get: function () {
            var value = this.get("type");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("type");
            }
            else {
                this.set("type", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "token_id", {
        get: function () {
            var value = this.get("token_id");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("token_id");
            }
            else {
                this.set("token_id", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "from", {
        get: function () {
            var value = this.get("from");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("from");
            }
            else {
                this.set("from", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "to", {
        get: function () {
            var value = this.get("to");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toString();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("to");
            }
            else {
                this.set("to", graph_ts_1.Value.fromString(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "price", {
        get: function () {
            var value = this.get("price");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("price");
            }
            else {
                this.set("price", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Activity.prototype, "blockTime", {
        get: function () {
            var value = this.get("blockTime");
            if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
                return null;
            }
            else {
                return value.toBigInt();
            }
        },
        set: function (value) {
            if (!value) {
                this.unset("blockTime");
            }
            else {
                this.set("blockTime", graph_ts_1.Value.fromBigInt(value));
            }
        },
        enumerable: false,
        configurable: true
    });
    return Activity;
}(graph_ts_1.Entity));
exports.Activity = Activity;
